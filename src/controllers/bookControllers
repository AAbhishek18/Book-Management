const mongoose = require('mongoose')
const express = require('express');
const moment = require('moment')
const userModel = require("../models/userModel");
const bookModel = require("../models/bookModel");
const date = moment().format("YYYY-MM-DD");




const createBook = async function(req, res) {
    try {
        let Body = req.body;
        let arr = Object.keys(Body);

        if (arr.length == 0) { return res.status(400).send({ status: false, message: "Please provide input" }) };
        if (!Body.title) { return res.status(400).send({ status: false, message: "Please provide title" }) };
        if (!Body.excerpt) { return res.status(400).send({ status: false, message: "Please provide excerpt" }) };
        if (!Body.userId) { return res.status(400).send({ status: false, message: "Please provide userId" }) };
        if (!Body.ISBN) { return res.status(400).send({ status: false, message: "Please provide ISBN" }) };
        if (!Body.category) { return res.status(400).send({ status: false, message: "Please provide category" }) };
        if (!Body.subcategory) { return res.status(400).send({ status: false, message: "Please provide subcategory" }) };
        // if (!Body.reviews) { return res.status(400).send({ status: false, message: "Please provide review" }) };
        if (!Body.releasedAt) { return res.status(400).send({ status: false, message: "Please provide releasedDate" }) };

        // if (!moment(Body.releasedAt).format("YYYY-MM-DD")) { return res.status(400).send({ status: false, message: "Please provide correct format of date" }) }
        const dateRgx = /^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$/.test(Body.releasedAt)
        if (!dateRgx) { return res.status(400).send({ status: false, message: "Please provide valid date formate YYYY-MM-DD" }) }

        const ISBNRgx = /^(?=(?:\D*\d){10}(?:(?:\D*\d){3})?$)[\d-]+$/.test(Body.ISBN)
        if (!ISBNRgx) { return res.status(400).send({ status: false, message: "Please provide valid ISBN format" }) }



        // title should be unique
        let checkTitle = await bookModel.findOne({ title: Body.title });
        if (checkTitle) { return res.status(400).send({ status: false, message: `${Body.title} already exist use different title of book` }) }

        let checkISBN = await bookModel.findOne({ ISBN: Body.ISBN });
        if (checkISBN) { return res.status(400).send({ status: false, message: `${Body.ISBN} already exist use different ISBN` }) }

        let checkUserId = await userModel.findOne({ _id: Body.userId });
        if (!checkUserId) { return res.status(404).send({ status: false, message: `userId not found` }) }

        let bookCreated = await bookModel.create(Body);
        res.status(201).send({ status: true, message: "success", data: bookCreated });



    } catch (err) {
        res.status(500).send({ status: false, Error: "Server not responding", msg: err.message, });
    }
}



const getBook = async function(req, res) {

    let query = req.query
    let { userId, category, subcategory } = query
    let arr = Object.keys(query);
    console.log(query)
    console.log(arr.length)

    if (arr.length === 0) {
        let findBook = await bookModel.find({ isDeleted: false }).select({ _id: 1, title: 1, excerpt: 1, userId: 1, category: 1, releasedAt: 1, reviews: 1 })
        findBook.sort(function(a, b) {
            var textA = a.title.toUpperCase();
            var textB = b.title.toUpperCase();
            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
        });
        if (!findBook) { return res.status(404).send({ status: false, message: "Book not found" }) }
        return res.status(200).send({ status: true, message: "Success", data: findBook })
    }
    if (arr.length !== 0) {
        const filterBook = await bookModel.find({ isDeleted: false }, query).select({ _id: 1, title: 1, excerpt: 1, userId: 1, category: 1, releasedAt: 1, reviews: 1 })
            // console.log(filterBook)
        filterBook.sort(function(a, b) {
            var textA = a.title.toUpperCase();
            var textB = b.title.toUpperCase();
            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
        });
        if (!filterBook) { return res.status(404).send({ status: false, message: "No book found with this filters" }) }
        return res.status(200).send({ status: true, data: filterBook })
    }

}

module.exports.createBook = createBook;
module.exports.getBook = getBook;